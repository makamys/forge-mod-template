buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'forge'

group = project.group
archivesBaseName = "$project.modid-$project.minecraft_version"
minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
	replace '@VERSION', project.version
}

// These settings allow you to choose what version of Java you want to be compatible with. Forge 1.7.10 runs on Java 6 to 8.
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven/"
	}
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven/'
    }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	
	embed 'org.spongepowered:mixin:0.7+'

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

def outRefMapFile = tasks.compileJava.temporaryDir.toString() + "/" + project.modid + ".mixin.refmap.json" // 1.7.10 mixin compatibility

jar {
    manifest {
        attributes (
            'MixinConfigs': project.modid + '.mixin.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            
            // If these two are not set, Forge will not detect the mod, it will only run the mixins
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true'
        )
    }

    from(sourceSets.main.output);
    
    from outRefMapFile; // 1.7.10 mixin compatibility

    // embed libraries in jar
    from configurations.embed.collect {
        exclude '**/LICENSE.txt'
        it.isDirectory() ? it : zipTree(it)
    }
}

// 1.7.10 mixin compatibility
def outSrgFile = tasks.compileJava.temporaryDir.toString() + "/outSrg.srg"

afterEvaluate {
    tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${outSrgFile}", "-AoutRefMapFile=${outRefMapFile}"];
}

reobf {
    addExtraSrgFile outSrgFile
}
// end of mixin stuff


processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'modid':project.modid, 'version':version, 'mcversion':project.minecraft.version
    }
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives devJar
}